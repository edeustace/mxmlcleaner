<?xml version="1.0" encoding="utf-8"?><DsPopup 	xmlns="com.test.two.games.view.components.popups.*"	xmlns:containers="flexlib.containers.*"	xmlns:mx="http://www.adobe.com/2006/mxml"	xmlns:dscomps="com.test.two.games.view.components.*"	width="550"	statusBarHeight="{popupStatusBarHeight}"	dragBarHeight="{POPUP_TITLEBAR_HEIGHT}"	topButtonsBarHeight="{POPUP_TITLEBAR_HEIGHT}"	topButtonsPaddingRight="17"	draggable="true"	printable="true"	styleName="articlePopupStyle"	initialize="onInitialize()"	creationComplete="onCreationComplete()"	xmlns:popups="com.test.two.community.popups.*"	xmlns:components="com.test.two.community.components.*">	<mx:Metadata>	 	// Name of the CSS style declaration that specifies styles for the title bar.		[Style(name="titleBarStyleName", type="String", inherit="yes")]		 	 	// Name of the CSS style declaration that specifies styles for the title label.		[Style(name="titleLabelStyleName", type="String", inherit="yes")]	 	// Name of the CSS style declaration that specifies styles for the text area.		[Style(name="textAreaStyleName", type="String", inherit="yes")]			 	// Name of the CSS style declaration that specifies styles for the text area.		[Style(name="textAreaBackgroundStyleName", type="String", inherit="yes")]			 	// Name of the CSS style declaration that specifies text area's top padding.		[Style(name="textAreaPaddingTop", type="Number", inherit="yes")]	 	// Name of the CSS style declaration that specifies text area's bottom padding.		[Style(name="textAreaPaddingBottom", type="Number", inherit="yes")]				[DefaultProperty("contentChildren")]				[Event(name="close", type="com.test.two.games.view.components.events.DsPopupEvent")]	</mx:Metadata>	<mx:Style>		.dsArticlePopupStyle		{			border-skin: ClassReference("com.test.two.games.view.components.skins.DsRectangularBorder");						closeButtonStyleName: dsArticlePopupCloseButtonStyle;			okButtonStyleName: dsArticlePopupOkButtonStyle;				printButtonStyleName: dsPopupPrintButtonStyle;			statusBarStyleName: dsArticlePopupStatusBarStyle;			textAreaStyleName: dsArticlePopupTextAreaStyle;			textAreaBackgroundStyleName: dsArticlePopupTextAreaBackgroundStyle;			titleBarStyleName: dsArticlePopupTitleBarStyle;			titleLabelStyleName: dsArticlePopupsTitleLabelStyle;						corner-radius: 5;						modalTransparency: 0;			modalTransparencyBlur: 0;						text-AreaPaddingBottom: 0;			text-area-padding-top: 0;			drop-shadow-enabled: true;			drop-shadow-angle: 90;			drop-shadow-distance: 3;			drop-shadow-color: 0;			drop-shadow-alpha: 0.8;			shadow-blur-x: 180;			shadow-blur-y: 180;		}					</mx:Style>	<mx:Script>		<![CDATA[			import com.test.common.util.DSAlert;			import com.test.two.games.view.components.events.DsPopupEvent;			import mx.controls.Alert;			import mx.core.UIComponent;			import mx.core.Container;			import mx.collections.ArrayCollection;			import com.test.two.games.view.components.events.DsTextEvent;			import com.test.two.games.view.components.DsTextArea;			import mx.managers.PopUpManager;			import mx.core.Application;			private var creationCompleted:Boolean=false;			private var _content:Array;			[ArrayElementType("mx.core.UIComponent")]			public function get contentChildren():Array			{				return _content;			}			public function set contentChildren(value:Array):void			{				removeContentChildren();				_content=value;				addContentChildren();			}			public var nonVisualChildren:Array;			///////////////////////////////////////////////////			// METHODS			///////////////////////////////////////////////////			override protected function createChildren():void			{				super.createChildren();				addContentChildren();			}			private function removeContentChildren():void			{				contentContainer.removeAllChildren();			}			private function addContentChildren():void			{				if (!creationCompleted)					return;				if (!contentContainer)					return;				for each (var child:UIComponent in contentChildren)				{					contentContainer.addChild(child);				}			}			public override function styleChanged(styleProp:String):void			{				super.styleChanged(styleProp);				const allStyles:Boolean=(!styleProp || styleProp == "styleName");				if (allStyles || styleProp == "titleBarStyleName")				{					if (titleBarArea != null && getStyle("titleBarStyleName"))						titleBarArea.styleName=getStyle("titleBarStyleName");				}				if (allStyles || styleProp == "titleLabelStyleName")				{					if (titleLabel != null && getStyle("titleLabelStyleName"))						titleLabel.styleName=getStyle("titleLabelStyleName");				}				if (allStyles || styleProp == "textAreaPaddingTop")				{					if (textAreaPaddingTopSpacer != null)					{						var taPaddingTop:Number=getStyle("textAreaPaddingTop");						if (!isNaN(taPaddingTop))							textAreaPaddingTopSpacer.height=taPaddingTop;					}				}				if (allStyles || styleProp == "textAreaPaddingBottom")				{					if (textAreaPaddingBottomSpacer != null)					{						var taPaddingBottom:Number=getStyle("textAreaPaddingBottom");						if (!isNaN(taPaddingBottom))							textAreaPaddingBottomSpacer.height=taPaddingBottom;					}				}				if (allStyles || styleProp == "textAreaBackgroundStyleName")				{					if (popupContent != null && getStyle("textAreaBackgroundStyleName"))						popupContent.styleName=getStyle("textAreaBackgroundStyleName");				}			}			private function onInitialize():void			{				//Here is where we need to add all the components 				//which might take space				//FIXME: The height of the linkbar is not necessarily fixed				//since the links are coming from CMS.//				applyCss(textArea, cssStyle);			}			private function onCreationComplete():void			{				creationCompleted=true;				addContentChildren();				addEventListener( DsPopupEvent.CLOSE_POPUP , onCloseEvent );			}			private function onExternalLink(event:DsTextEvent):void			{				DSAlert.showNotImplemented("external links not yet implemented.");			}						private var redispatchingCloseEvent : Boolean;			private function onCloseEvent( event : DsPopupEvent ) : void			{				if (!redispatchingCloseEvent)				{					redispatchingCloseEvent = true;					dispatchEvent( event );					redispatchingCloseEvent = false;				}			}						///////////////////////////////////////////////////			// VARIABLES			///////////////////////////////////////////////////			[Bindable]			// This shows/hides the bottom spacer.			public var showBottomMargin:Boolean;			[Bindable]			// This text is placed in the popup's title.			public var title:String;			[Bindable]			// The popup's text. It can contain a small subset of HTML text formatting tags.			public var text:String;			private var _linkStyle:Object			/** A style object which is applied to anchor styles the textArea.			 * Used for adding anchor styles, which don't seem to work when parsed from css.			 * Eg :			 * public var linkStyle : Object = { fontWeight : "bold" }			 * gets set against a:link , a:hover , a:active */			[Bindable]			public function get linkStyle():Object			{				return _linkStyle;			}			public function set linkStyle(value:Object):void			{				_linkStyle=value;			}			protected static const POPUP_MAX_HEIGHT:Number=400;			protected static const POPUP_MIN_HEIGHT:Number=202;			protected static const POPUP_TITLEBAR_HEIGHT:Number=41;			[Bindable]			public var popupStatusBarHeight:Number=59;			[Bindable]			public var anchors:ArrayCollection;			private function onLinkButtonClick(ta:DsTextArea, linksNames:ArrayCollection, linkIdx:int):void			{				ta.goToLink(getLinkName(linksNames, linkIdx));			}			private function getLinkName(linksNames:ArrayCollection, linkIdx:int):String			{				if (linksNames != null && linkIdx >= 0 && linksNames.length > linkIdx)					return linksNames[linkIdx];				// If index is out of range, return a dummy link name.				return "";			}		]]>	</mx:Script>	<content>		<mx:VBox id="popupContent"			width="100%"			verticalGap="0"			horizontalScrollPolicy="off"			verticalScrollPolicy="off">			<!-- Help popup's title bar. -->			<mx:HBox id="titleBarArea"				width="100%"				height="{POPUP_TITLEBAR_HEIGHT}"				horizontalAlign="left"				verticalAlign="middle"				horizontalScrollPolicy="off"				verticalScrollPolicy="off"				paddingLeft="22"				paddingTop="3">				<mx:Label id="titleLabel"					text="{title}"					textAlign="left"					width="100%"/>			</mx:HBox>			<mx:Spacer id="textAreaPaddingTopSpacer"				height="0"				includeInLayout="{ textAreaPaddingTopSpacer.height > 0 }"/>			<mx:VBox id="contentContainer"				width="100%"				verticalScrollPolicy="off"				horizontalScrollPolicy="off"/>							<mx:Spacer id="textAreaPaddingBottomSpacer"				height="0"				includeInLayout="{ textAreaPaddingBottomSpacer.height > 0 &amp;&amp; showBottomMargin }"/>		</mx:VBox>	</content></DsPopup>